Script started on Fri 06 Nov 2020 08:49:01 PM EST
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[?1034h[arnold_se@cobra Prog3]$ cat -n zip.cpp
     1	#include<iostream>
     2	#include<map>
     3	#include<string>
     4	#include<fstream>
     5	#include"huffman.h"
     6	
     7	using namespace std;
     8	
     9	void closeFiles(string unzipFile, ofstream & zipfile);
    10	void openFile(char **argv, HuffmanTree & h, int Letters[]);
    11	void readFiles(string unzipFile, ofstream & zipfile, HuffmanTree & h, int Letters[]);
    12	void CountLetters (int Letters[], string unzipFile, HuffmanTree & h);
    13	void buildHuffman(int Letters[], HuffmanTree & h);
    14	void zipFile(string unzipFile, ofstream & zipfile, HuffmanTree & h, int Letters[]);
    15	void compressionRatio(int Letters[], HuffmanTree & h);
    16	
    17	int main(int argc, char **argv)
    18	{   
    19	    HuffmanTree h;
    20	    const int NumLetters = 256;
    21	    int Letters[NumLetters]; 
    22	    
    23	    if(argc<=3)
    24	        openFile(argv, h, Letters);
    25	    else if(argc==1)
    26	        cout<<"Please enter the correct amount of arguments."<<endl;
    27	    else
    28	        cout<<"Please enter the correct amount of arguments."<<endl;
    29	
    30	    return 0;
    31	}
    32	
    33	void openFile(char **argv, HuffmanTree & h, int Letters[])
    34	{
    35	    ifstream unzipfile;
    36	    ofstream zipfile;
    37	    string unzipFile;
    38	    string argv1 = argv[1];
    39	
    40	    //--t, prints encoding table and zips file
    41	    if(argv1 == "--t")
    42	    {   
    43	        string argv2 = argv[2];
    44	        readFiles(argv2, zipfile, h, Letters); 
    45	        h.PrintTable();
    46	        closeFiles(unzipFile, zipfile);
    47	        
    48	    }
    49	    //--help
    50	    else if(argv1 == "--help")
    51	    {
    52	        cout<<endl;
    53	        cout<<"If you would like to zip a file, type ./a.out filename"<<endl;
    54	        cout<<"If you would like to be shown the encoding table of a zip file, type ./a.out --t filename"<<endl;
    55	        cout<<endl;
    56	    }
    57	    //zip files and print compression formula
    58	    else
    59	    {
    60	        readFiles(argv1, zipfile, h, Letters); 
    61	        closeFiles(unzipFile, zipfile);
    62	    }
    63	}
    64	
    65	//makes sure unzipfile is open 
    66	void readFiles(string unzipFile, ofstream & zipfile, HuffmanTree & h, int Letters[])
    67	{
    68	    ifstream unzipfile;
    69	    unzipfile.open(unzipFile.c_str());
    70	    zipfile.open((unzipFile+".zip").c_str()); 
    71	
    72	    if(unzipfile.is_open())
    73	    {
    74	        CountLetters(Letters, unzipFile, h);
    75	     
    76	        buildHuffman(Letters, h);
    77	       
    78	        zipFile(unzipFile, zipfile, h, Letters);
    79	        compressionRatio(Letters, h);
    80	    }  
    81	    else
    82	        cout<<"File not open"<<endl;
    83	}
    84	
    85	//building the huffman tree
    86	void buildHuffman(int Letters[], HuffmanTree & h)
    87	{
    88	    //Letters[i]= frequency or weight 
    89	    for(int i=0; i<126; i++)
    90	    {
    91	        if(Letters[i]!=0)
    92	            h.insert((char)i,Letters[i]);
    93	    }
    94	    h.build();
    95	}
    96	
    97	//compressing file and printing in zipfile
    98	void zipFile(string unzipFile, ofstream & zipfile, HuffmanTree & h, int Letters[])
    99	{
   100	    ifstream unzipfile;
   101	    unzipfile.open(unzipFile.c_str());
   102	    
   103	    //first line prints number of characters
   104	    zipfile<<h.numNodes()<<endl;
   105	
   106	    //printing ASCII value and code
   107	    for(int i=0; i<126; i++)
   108	    {
   109	        if(Letters[i]!=0)
   110	            zipfile<<i<<" "<<h.GetCode((char)i)<<endl;  
   111	    }
   112	    
   113	    //printing compressed data in binary
   114	    char ch;
   115	    while(unzipfile)
   116		{
   117	        unzipfile.get(ch);
   118	        zipfile<<h.GetCode(ch);
   119		}
   120	}
   121	
   122	//printing compression ratio
   123	void compressionRatio(int Letters[], HuffmanTree & h)
   124	{
   125	    int zipSum=0;
   126	    int unzipSum=0;
   127	    for(int i=0; i<126; i++)
   128	    {
   129	        if(Letters[i]!=0)
   130	        {
   131	            //frequency (used for both unzip and zip calculation)
   132	            int frequency = Letters[i];
   133	            //length of the compressed code
   134	            int lengthOfCode = h.GetCode((char)i).length();
   135	            //total bits per char
   136	            int numBits = frequency*lengthOfCode;
   137	            zipSum += numBits;
   138	            //chars from source file
   139	            int numSorceFile = frequency*8;
   140	            unzipSum += numSorceFile;
   141	        }
   142	    }
   143	    //compression ratio
   144	    float ratio = (1-(float)zipSum/unzipSum)*100;
   145	    cout<<"File Successfully Compressed To "<<zipSum<<" Bits (";
   146	    printf("%.2f",ratio);
   147	    cout<<"% Less)."<<endl;
   148	}
   149	
   150	void closeFiles(string unzipFile, ofstream & zipfile)
   151	{
   152	   //close files
   153	    ifstream unzipfile;
   154	    zipfile.close();
   155	    unzipfile.close();
   156	}
   157	
   158	//From Dr. Digh's letters.cpp
   159	void CountLetters (int Letters[], string unzipFile, HuffmanTree & h)
   160	{
   161		char ch;
   162	    ifstream unzipfile;
   163	    unzipfile.open(unzipFile.c_str());
   164	
   165		for (char ch = char(0);  ch <= char(126);  ch++)
   166			Letters[ch] = 0;
   167	
   168		unzipfile.get(ch);
   169	    
   170	    while (unzipfile)
   171		{
   172			Letters[ch] += 1;
   173			unzipfile.get(ch);
   174		}
   175	} 
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ cat huffman.h
#include <vector>
#include <string>
using namespace std;

struct HNode {
    char ch;
    int weight;
    int parent;
    int childType;
};

class HuffmanTree {
    public:
	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree
		
	int GetFrequency(char ch);		// returns the weight of a given character

	
	void build();				// Builds the Huffman Tree;
	

	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process
	
	int numNodes();				// returns the number of nodes currently in Huffman 
						// tree

    private:
	vector<HNode> nodes;
	int numChars;
	bool built;                             
	
	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at 
						// a given index
};
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ cat huffman.cpp
#include "huffman.h"
#include <iostream>
using namespace std;

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}

void HuffmanTree:: insert(char ch, int weight) {
    HNode newNode = {ch, weight, -1, -1}; 
    built = false;
    nodes.push_back(newNode);
    numChars++;
}

//return true if char is in tree
bool HuffmanTree:: inTree(char ch) {
    return (lookUp(ch)!=-1);
}

//public, returns weight of a given character
int HuffmanTree:: GetFrequency(char ch) {
    return GetFrequency(lookUp(ch));
}

//private, returns the weight at given index
int HuffmanTree:: GetFrequency(int i) {
    return nodes[i].weight;
}

//return index of given character in tree
int HuffmanTree:: lookUp(char ch) {
    for(int i=0; i<numNodes(); i++)
    {
        if(nodes[i].ch==ch)
             return i;  
    }
    return -1;        
}

//public, returns compressed code of given character in tree
string HuffmanTree:: GetCode(char ch) {
    return GetCode(lookUp(ch));
}

//private, returns compressed code of character at given index
string HuffmanTree:: GetCode(int i) {
    if(nodes[i].parent==-1)
        return "";
    else
        return(GetCode(nodes[i].parent)+(char)(nodes[i].childType+'0'));
}

//print encoding table
void HuffmanTree:: PrintTable() {
    cout<<endl;
    cout<<"\t ++++ ENCODING TABLE ++++ "<<endl;
    cout<<endl;
    cout<<"Index\tChar\tWeight\tParent\tChildType"<<endl;
    int x=0;
    for(int i=0;  i < numNodes(); i++)
    {
	  if (nodes[i].ch==' ')
	    cout<<i<<"\t sp"<<"\t"<<nodes[i].weight <<"\t"<<nodes[i].parent<<"\t"<<nodes[i].childType<<endl;
	  else if (nodes[i].ch=='\n')
	    cout<<i<<"\t nl"<<"\t"<<nodes[i].weight <<"\t"<<nodes[i].parent<<"\t"<<nodes[i].childType<<endl;
	  else if (nodes[i].ch=='\0')
      {
          x++;
          cout<<i<<"\t T"<<x<<"\t"<<nodes[i].weight <<"\t"<<nodes[i].parent<<"\t"<<nodes[i].childType<<endl;
      }
      else
        cout<<i<<"\t "<<nodes[i].ch<<"\t"<<nodes[i].weight <<"\t"<<nodes[i].parent<<"\t"<<nodes[i].childType<<endl;
    }
    cout<<endl;
}

//returns total number of nodes
int HuffmanTree:: numNodes() {
    return nodes.size();
}

//build huffman tree
void HuffmanTree:: build() {
    int sm1;
    int sm2;
    
    int i=0;
    while(!built)
    {
        sm1=i;
        sm2=0;
        //node without parent
        if(nodes[sm1].parent==-1)
        {
            //combind the nodes
            for(int x=0; x<nodes.size(); x++)
            {
                if((nodes[x].weight < nodes[sm1].weight) && nodes[x].parent==-1)
                    sm1=x; 
            }
            while(sm1==sm2 || nodes[sm2].parent!=-1)
                sm2++;
                
            for(int x=0; x<nodes.size(); x++)
            {
                if((nodes[x].weight < nodes[sm2].weight) && x!=sm1 && nodes[x].parent==-1)
                    sm2=x;    
            }
            HNode parentNode = {'\0', nodes[sm1].weight+nodes[sm2].weight, -1, -1};
            nodes.push_back(parentNode);
            nodes[sm1].parent=nodes.size()-1;
            nodes[sm2].parent=nodes.size()-1;    
            nodes[sm1].childType=0;
            nodes[sm2].childType=1;
        }
        i++;
        built=((2*numChars-1)==numNodes())?true:false;
    }
    
}

]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ c++ zip.cpp huffman.o
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ my[K[Kmv a[K./a.out myZip
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ c++ unzip.cpp
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ ,[Kmv ./a.out myUnzip
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ my[K[K./my[KyUnzip sma[K[Kample1
File is not .zip file
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ ./mu[KyZip sample1
File Successfully Compressed To 146 Bits (68.53% Less).
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ m[K./myZip --t sample1
File Successfully Compressed To 146 Bits (68.53% Less).

	 ++++ ENCODING TABLE ++++ 

Index	Char	Weight	Parent	ChildType
0	 nl	1	7	0
1	 sp	13	10	1
2	 a	10	9	1
3	 e	15	11	0
4	 i	12	10	0
5	 s	3	7	1
6	 t	4	8	0
7	 T1	4	8	1
8	 T2	8	9	0
9	 T3	18	11	1
10	 T4	25	12	0
11	 T5	33	12	1
12	 T6	58	-1	-1

]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ ./myZip --helpd[K sample1

If you would like to zip a file, type ./a.out filename
If you would like to be shown the encoding table of a zip file, type ./a.out --t filename

]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ ./myUnzip sample1.zip
File Successfully Inflated Back to Original
]0;arnold_se@cobra:~/CSC245/Prog/Prog3[arnold_se@cobra Prog3]$ exit
exit

Script done on Fri 06 Nov 2020 08:53:12 PM EST
