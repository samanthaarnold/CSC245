Script started on Fri 18 Sep 2020 04:48:19 PM EDT
]0;arnold_se@cobra:~/Prog1[?1034h[arnold_se@cobra Prog1]$ cat MoveFront.cpp
#include<iostream>

using namespace std;
#include"dlist.h"


void PrintMenu(char& a);
void HeadInsert(DList<int>& list);
void TailInsert(DList<int>& list);
void AccessItem(DList<int>& list);
void Delete(DList<int>& list);
void PrintList(DList<int>& list);
void FindAndMove(DList<int>& list,int x);
void PrintLength(DList<int>& list);

int main()
{

	DList<int> list;
	char sel;

	do
	{
		PrintMenu (sel);
		switch (toupper(sel))
		{
			case 'H' : 
				HeadInsert(list);
				 break;
			case 'T' :
				 TailInsert(list);
				 break;
			case 'A' :
				 AccessItem(list); 
				break;
			case 'D' :
				 Delete(list);
				 break;
			case 'P' :
				 PrintList(list);
				 break;
			case 'L' :
				 PrintLength(list);
				 break;
			case 'Q' :
				 cout<< "\tExiting Program...\n";
				 break;
			default :
				 cout<<"\tError. Try Again." <<endl;	
		}
	}while (toupper(sel) != 'Q');

	return 0;

}

//Menu
void PrintMenu(char & sel)
{

	cout<<"|-----------------------------|"<<endl;
	cout<<"|------------Menu-------------|"<<endl;
	cout<<"|-----------------------------|"<<endl;
	cout<<"|                             |"<<endl;
	cout<<"| H: Insert item at front     |"<<endl;
	cout<<"| T: Insert item at back      |"<<endl;
	cout<<"| A: Access an item in list   |"<<endl;
	cout<<"| D: Delete an item in list   |"<<endl;
	cout<<"| P: Print the list           |"<<endl;
	cout<<"| L: Print the list's length  |"<<endl;
	cout<<"| Q: Quit the program         |"<<endl;
	cout<<"|                             |"<<endl;
	cout<<"|-----------------------------|"<<endl;
	cout<<"|                             |"<<endl;
	cout<<"|  Please enter your choice:  |"<<endl;
	cin>> sel;
}

//add item to head of list using .insertHead
void HeadInsert(DList<int> &list)
{
	int item;
	cout<<"\v\t Item to be Inserted to the Front of List : ";
	cin >> item;
	if(! list.inList(item))
		list.insertHead(item);
	else
		cout<<"\t Item already Exists. No Duplicates Allowed."<<endl;
}

//add item to tail using .appendTail
void TailInsert(DList<int>& list)
{
	int item;
	cout<< "\v\t Item to be inserted to the tail of List : ";
	cin >> item;
	if( ! list.inList(item))
		list.appendTail(item);
	else
		cout<<"\t Item already Exists. No Duplicates Allowed." <<endl;
	
}

//access item in list using .inList
void AccessItem(DList<int>& list)
{
	if( ! list.isEmpty())
	{
		int item;
		cout <<"\v\t Item to be Accessed in the List : ";
		cin >> item;
		FindAndMove(list,item);
	}
	else
		cout<<"\t Error -- List is Empty. " << endl;


}

//delete from list using .deleteItem
void Delete(DList<int>& list)
{	
	int item;
	cout << "\v\t Item to be deleted : ";
	cin >> item;
	if(list.inList(item))
		list.deleteItem(item);
	else if(list.isEmpty())
		cout<<"\t Error -- List is Empty."<<endl;
	else
		cout<<"\t Item does dot Exist in List"<<endl;
}

//print list using .print
void PrintList(DList<int>& list)
{
	if(! list.isEmpty())
		list.print();
	else
		cout<<"\t Error -- List is Empty."<<endl;
}

//print length using .length
void PrintLength(DList<int> &list)
{
	cout<<"The length is "<< list.lengthIs()<<endl;
}

//moving item in list
void FindAndMove(DList<int>& list, int item)
{
	list.deleteItem(item);
	list.insertHead(item);
}
]0;arnold_se@cobra:~/Prog1[arnold_se@cobra Prog1]$ cat dlist.h

using namespace std;

template <class ItemType>
struct NodeType;

template <class ItemType>
class DList 
{
public :
    DList ();		// Constructor
    ~DList   ();  	// Destructor	

    // Public Operations
    void makeEmpty (); 
    void deleteItem (ItemType item);
    bool inList (ItemType item) const;	
    bool isEmpty () const;  
    void print() const; 
    void insertHead (ItemType item); 
    void appendTail (ItemType item); 
    int lengthIs() const;

private :
    // Private Attributes of a DList Object 
    NodeType<ItemType>* head;
    int length;

    // Functions Called Solely By Public Functions, Not The Client 
    NodeType<ItemType>* location(ItemType item) const;
    NodeType<ItemType>* last() const; 
    void deleteLocation (NodeType<ItemType>* delPtr);
};

#include "dlist.cpp"
]0;arnold_se@cobra:~/Prog1[arnold_se@cobra Prog1]$ cat dlist.cpp
#include <cstddef> 
#include <iostream>

using namespace std;

template<class ItemType>
struct NodeType
{
	ItemType info;
	NodeType<ItemType>*	next;
	NodeType<ItemType>*	back;
};

template <class ItemType>		
DList<ItemType>::DList()		// Class constructor
{
    length = 0;
    head = NULL;
}

template <class ItemType>
DList<ItemType>::~DList   ()		//Destructor
{
	// Post: List is empty; All items have been deallocated.
	makeEmpty();	
}

template <class ItemType>
void DList<ItemType>::makeEmpty()
{
    // Post: List is empty; all items have been deallocated.
	while(length>0)
	{
		deleteLocation(last());
	}	
}

template <class ItemType>
void DList<ItemType>::deleteItem (ItemType item)	
{
	//  Pre :  item to be deleted is passed in via parameter 
        // Post :  item is deleted if it exists in list 
	deleteLocation(location(item));
}

template <class ItemType>
bool DList<ItemType>::inList (ItemType item) const
{
	//  Pre :  item to be located is passed in via parameter 
        // Post :  function returns bool value if item is found 
	NodeType<ItemType>* temp = new NodeType<ItemType>;
	temp=head;
	while(temp!= NULL)
	{
		if(temp->info == item)
			return true;
		temp=temp->next;
	}	
	return false;	
}

template <class ItemType>
bool DList<ItemType>::isEmpty() const		
{
	// Post : function returns true if list is empty, false otherwise
	if(head == NULL)
		return true;
	else
		return false;	
}

template <class ItemType>
void DList<ItemType>::print() const	
{
	// Pre  : List is not empty 
	// Post : Items in List have been printed to screen
	NodeType<ItemType>* temp = head; 
	if(isEmpty())
	{
		cout<<"The list is empty\n"<<endl;
	}
	else
	{
		cout<<"The list contains: \n";
		while(temp != NULL)
		{
			cout<<temp->info <<endl;
			temp=temp->next;
		}

	}	 		

}
	
template <class ItemType>
void DList<ItemType>::insertHead(ItemType item)	
{

	NodeType<ItemType>* newNode = new NodeType<ItemType>;
	newNode->info = item;
	newNode->back = NULL;

        if(head != NULL)
	{
		head->back = newNode;
		newNode->next = head;
	}
	else
		newNode->next = NULL;
 
	head = newNode;
	length++;
}

template <class ItemType>
void DList<ItemType>::appendTail(ItemType item)
{
	//  Pre :  item to be inserted is passed in via parameter
        // Post :  item is added to tail of list; Former last node
        //         is linked to this new one via double link 
	NodeType<ItemType>* newNode = new NodeType<ItemType>;
	newNode->info = item;
	newNode->next = NULL;
	
	if(head == NULL)
	{
		newNode->back = NULL;
		head = newNode;	
	}
	else
	{
		newNode->back = last();
		newNode->back->next=newNode;
	}
	length++; 
}

template <class ItemType>
int DList<ItemType>::lengthIs() const	
{
	return length;	  
}

template <class ItemType>
NodeType<ItemType>* DList<ItemType>::location(ItemType item) const	
{
	//  Pre : item to be located is passed in via parameter 
        // Post : function returns address of item being searched for --
        //        if not found, NULL is returned 
	if(inList(item))
	{
	NodeType<ItemType>*temp = new NodeType<ItemType>;
	temp=head;
	while(temp->info!=item)
	{
		temp = temp->next;	 
	}
	return temp;
	}
	else
		return NULL;
}

template <class ItemType>
NodeType<ItemType>* DList<ItemType>::last() const	
{
	// Post : Function returns location of current last item in list
	NodeType<ItemType> * temp = head;
	if(isEmpty())
	{
		return NULL;
	}
	while(temp->next != NULL)
	{
		temp = temp->next;	
	}
	return temp;	
}

template <class ItemType>
void DList<ItemType>::deleteLocation (NodeType<ItemType>* delPtr)	
{

	//  Pre : Item to be deleted exits in list and its location
        //        is passed in via parameter
                   
	// Post : Location passed in is removed from list;  Length
        //        is decremented, and location is deallocated 

        // Special Cases Handled for Deleting Only One Item in List,
        // The Head Item of List, and the Tail Item of List
	
	if(length==1)
	{
		delete delPtr;
		delPtr = NULL;
		head = NULL;	
	}
	else if(head==delPtr) 
	{
		head=head->next;
		head->back=NULL;
	}
	else if(last()==delPtr)
	{
		delPtr->back->next=NULL;
	}
	else
	{
		delPtr->next->back=delPtr->back;
		delPtr->back->next=delPtr->next;
	}
	length--;
	delPtr=NULL;
	delete delPtr;
	

}
]0;arnold_se@cobra:~/Prog1[arnold_se@cobra Prog1]$ c++ MoveFront.cpp
]0;arnold_se@cobra:~/Prog1[arnold_se@cobra Prog1]$ ./a.out
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
h
	 Item to be Inserted to the Front of List : 2
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
h
	 Item to be Inserted to the Front of List : 4
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
t
	 Item to be inserted to the tail of List : 5
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
t4
	 Item to be inserted to the tail of List : 	 Item already Exists. No Duplicates Allowed.
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
d
	 Item to be deleted : 4
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
p
The list contains: 
2
5
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
h
	 Item to be Inserted to the Front of List : 3
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
p
The list contains: 
3
2
5
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
d
	 Item to be deleted : 5
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
p
The list contains: 
3
2
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
l
The length is 2
|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |
q
	Exiting Program...
]0;arnold_se@cobra:~/Prog1[arnold_se@cobra Prog1]$ exit
exit

Script done on Fri 18 Sep 2020 04:50:06 PM EDT
