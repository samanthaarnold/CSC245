Script started on Tue 06 Oct 2020 10:53:10 PM EDT
]0;arnold_se@cobra:~/Prog2[?1034h[arnold_se@cobra Prog2]$ cat testBet.cpp
#include<iostream>
#include "bet.h"
#include<string>
#include<stack>

using namespace std;

void PrintMenu();
void PrintExit(char &a);
BET BuildTreePrefix();
BET BuildTreePostfix();
BET ConvertInfixToPostfix();
void PrintTree(BET b);
int operatorPrec(char m);

int main()
{
    BET b;
    string expression;
    int sel;
    char stop;
    do
    {
        PrintMenu();
        cin>>sel;
        switch (sel)
        {
        case 1:
            //build tree type Prefix
           PrintTree(BuildTreePrefix());
            break;
        case 2:
            //build tree type Infix
            PrintTree(ConvertInfixToPostfix());
            break;

        case 3:
            //build tree type Postfix
            PrintTree(BuildTreePostfix());
            break;

        default:
            cout<<"Error. Try Again."<<endl;
            break;
        }

        PrintExit(stop);

    } while (toupper(stop) != 'N');
    
    return 0;   
}

void PrintMenu()
{
    cout<<"&&&&&&&&&&& BUILDING BINARY EPRESSION TREES &&&&&&&&&&&"<<  endl;
    cout<<"\t (1) Prefix \t (2) Infix \t (3) Postfix"<<endl;
    cout<<endl;
    cout<<"Your Expression Type ==>  ";
}

void PrintExit(char & stop)
{
    cout<<"Build Another Tree? (Y/N) ";
    cin>>stop;
    if(toupper(stop)== 'N')
        cout<<"Program Now Deconstructing Tree & Exiting... "<<endl;
    cout<<endl;
}

BET BuildTreePrefix()
{
    BET b;
    cout<<endl;
    string e;
    cout<<"Your Expression ==>  ";
    cin.ignore();
    getline(cin, e);
    cout<<endl;

    char c;
    for (int i = e.length()-1; i>=0; i--)
    {
        c=e[i];
        if(c==' ') { }
        else if(c=='+')
            b.insertPrefixOperator(c);
        else if (c=='-')
            b.insertPrefixOperator(c);
        else if (c=='*')
            b.insertPrefixOperator(c);
        else if (c=='/')
            b.insertPrefixOperator(c);
        else
            b.insertOperand(c);
    }
    return b;
}

BET BuildTreePostfix()
{
    BET b;
    cout<<endl;
    string e;
    cout<<"Your Expression ==>  ";
    cin.ignore();
    getline(cin, e);
    cout<<endl;

    char c;
    for (int  i = 0; i< e.length(); i++)
    {
        c=e[i];
        if(c==' ') { }
        else if(c=='+')
            b.insertPostfixOperator(c);
        else if (c=='-')
            b.insertPostfixOperator(c);
        else if (c=='*')
            b.insertPostfixOperator(c);
        else if (c=='/')
            b.insertPostfixOperator(c);
        else
            b.insertOperand(c);
    }
    return b;
}

BET ConvertInfixToPostfix()
{
    BET b;
    cout<<endl;
    string e;
    cout<<"Your Expression ==>  ";
    cin.ignore();
    getline(cin, e);
    cout<<endl;

    string postfix;
    stack<char>infix;
    char c;
    e+=')';
    e='('+ e;
    infix.push(e[0]);
    for(int i=1; i<e.length(); i++)
    {
        c=e[i];
        if(c=='+'||c=='-'||c=='*'||c=='/'||c=='('||c==')')
        {
            char k = infix.top(); 
            if(c=='(')
            {
                infix.push(c);
            }
            else if(c==')')
            {
                while(infix.top()!='(')
                {
                    postfix = postfix+infix.top();
                    infix.pop();
                }
                infix.pop();
            }
            else if (operatorPrec(c)<=operatorPrec(k))
            {
                while (operatorPrec(c)<=operatorPrec(k))
                {
                    infix.pop();
                    postfix = postfix+k;
                    k = infix.top();
                }
                infix.push(c);
            }
            else
            {
                 infix.push(c);
            } 
        }  
        else if(c==' ') { }
        else 
            postfix = postfix+c;
    }
    
    char g;
    for (int  x = 0; x< postfix.length(); x++)
    {
        g=postfix[x];
        if(g==' ') { }
        else if(g=='+')
            b.insertPostfixOperator(g);
        else if (g=='-')
            b.insertPostfixOperator(g);
        else if (g=='*')
            b.insertPostfixOperator(g);
        else if (g=='/')
            b.insertPostfixOperator(g);
        else
            b.insertOperand(g);
    }
    return b;
}

int operatorPrec(char m)  
{  
    if(m ==')')
        return (5);
    else if ( m=='*'||m=='/'  )
        return (2);
    else if(m=='+'||m=='-' ) 
        return (1);
    else
        return (0); 
}

void PrintTree(BET b)
{
    cout<<endl;
    cout<<"Prefix Expression Produced From Tree : "<<endl;
    b.preorder();
    cout<<endl;
    cout<<"Infix Expression Produced From Tree : "<<endl;
    b.inorder();
    cout<<endl;
    cout<<"Postfix Expression Produced From Tree : "<<endl;
    b.postorder();
    cout<<endl;
    cout<<endl;
}
]0;arnold_se@cobra:~/Prog2[arnold_se@cobra Prog2]$ cat bet.cpp
#include "bet.h"
#include<iostream>

using namespace std;

BET::BET()  //Constructor
{
	root=NULL;
}

BET::~BET()  //Destructor
{
	makeEmpty();
}

bool BET::isEmpty() const
{
	return root==NULL;
}

void BET::makeEmpty() //makeEmpty From Public
{
	makeEmpty(root);
}

//makeEmpty From Private
void BET::makeEmpty( BETPtr& t ) const
{	
	if(t!=NULL)
	{
		makeEmpty(t->left);
		makeEmpty(t->right);
		delete t;
		t=NULL;		
	}
}

void BET::insertPrefixOperator(char token)
{
	BETPtr ptr = new BinaryNode;
	ptr->info.theContent.opsymbol = token;
    ptr->info.whichType = OPERATOR;
    ptr->left = s.top();	s.pop();
    ptr->right = s.top();	s.pop();
    
	s.push(ptr);
    root = s.top();
}

void BET::insertPostfixOperator(char token) 
{
	BETPtr ptr = new BinaryNode;
	ptr->info.theContent.opsymbol = token;
    ptr->info.whichType = OPERATOR;
	ptr->right = s.top();	s.pop();
    ptr->left = s.top();	s.pop();
    
	s.push(ptr);
    root = s.top();
}


void BET::insertOperand(char token)
{
	BETPtr ptr1 = new BinaryNode;
	ptr1->info.theContent.variable = token;
	ptr1->info.whichType = OPERAND;
	ptr1->right = NULL;
	ptr1->left = NULL;
	s.push(ptr1);
}

void BET::preorder() const //preorder From Public
{
	if(isEmpty() )
		cout<<"Tree is empty"<<endl;
	else
		return preorder(root);
}

void BET::preorder( BETPtr t) const //preorder From Private
{
	if( t != NULL)
    {
    	if( (t->info.whichType) == OPERAND)                    
			cout<< t->info.theContent.variable <<" ";
    	else
             cout<< t->info.theContent.opsymbol <<" ";
		preorder(t->left);
    	preorder(t->right);
    }
}


void BET:: inorder() const //inorder from Public
{	
	if(isEmpty() )
		cout<< "Tree is empty"<<endl;
	else
		return inorder(root);
}

void BET::inorder( BETPtr t ) const //inorder from Private
{
	//Post: Function prints inorder traversal for public inorder
	if( t != NULL)
	{
		if( t->left != NULL)
			cout<<"(";
		inorder(t->left);
		if( (t->info.whichType) == OPERAND)
			cout<< t->info.theContent.variable <<" ";
		else
			cout<< t->info.theContent.opsymbol <<" ";
		inorder( t->right );
		if( t->right != NULL)
			cout<<") ";
	}
}

void BET:: postorder() const //postorder from Public
{
	if(isEmpty() )
		cout<<"Tree is empty"<<endl;
	else
		return postorder(root);
}

void BET::postorder( BETPtr t) const //postorder from Private
{
     if( t != NULL)
        {
			postorder(t->left);
			postorder(t->right);
			if( (t->info.whichType) == OPERAND)
				cout<< t->info.theContent.variable <<" ";
            else
                cout<< t->info.theContent.opsymbol <<" ";  
        }
}
  

]0;arnold_se@cobra:~/Prog2[arnold_se@cobra Prog2]$ c++ testBet.cpp bet.o
]0;arnold_se@cobra:~/Prog2[arnold_se@cobra Prog2]$ ./a.out
&&&&&&&&&&& BUILDING BINARY EPRESSION TREES &&&&&&&&&&&
	 (1) Prefix 	 (2) Infix 	 (3) Postfix

Your Expression Type ==>  1

Your Expression ==>  * + a - / b c d * e + f g


Prefix Expression Produced From Tree : 
* + a - / b c d * e + f g 
Infix Expression Produced From Tree : 
((a + ((b / c ) - d ) ) * (e * (f + g ) ) ) 
Postfix Expression Produced From Tree : 
a b c / d - + e f g + * * 

Build Another Tree? (Y/N) y

&&&&&&&&&&& BUILDING BINARY EPRESSION TREES &&&&&&&&&&&
	 (1) Prefix 	 (2) Infix 	 (3) Postfix

Your Expression Type ==>  2

Your Expression ==>  1 - 3 * (4 + 5 * 6) + 7


Prefix Expression Produced From Tree : 
+ - 1 * 3 + 4 * 5 6 7 
Infix Expression Produced From Tree : 
((1 - (3 * (4 + (5 * 6 ) ) ) ) + 7 ) 
Postfix Expression Produced From Tree : 
1 3 4 5 6 * + * - 7 + 

Build Another Tree? (Y/N) y

&&&&&&&&&&& BUILDING BINARY EPRESSION TREES &&&&&&&&&&&
	 (1) Prefix 	 (2) Infix 	 (3) Postfix

Your Expression Type ==>  4
Error. Try Again.
Build Another Tree? (Y/N) y

&&&&&&&&&&& BUILDING BINARY EPRESSION TREES &&&&&&&&&&&
	 (1) Prefix 	 (2) Infix 	 (3) Postfix

Your Expression Type ==>  3

Your Expression ==>  ab+c/d*


Prefix Expression Produced From Tree : 
* / + a b c d 
Infix Expression Produced From Tree : 
(((a + b ) / c ) * d ) 
Postfix Expression Produced From Tree : 
a b + c / d * 

Build Another Tree? (Y/N) n
Program Now Deconstructing Tree & Exiting... 

]0;arnold_se@cobra:~/Prog2[arnold_se@cobra Prog2]$ exit
exit

Script done on Tue 06 Oct 2020 10:56:06 PM EDT
